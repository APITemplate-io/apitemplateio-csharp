/*
 * APITemplate.io API Reference
 *
 * # Introduction   Welcome to the [APITemplate.io](https://apitemplate.io) API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- --| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- --| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using APITemplateio.Client;
using APITemplateio.Model;

namespace APITemplateio.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessTemplate</returns>
        ResponseSuccessTemplate GetTemplate(string? templateId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessTemplate</returns>
        ApiResponse<ResponseSuccessTemplate> GetTemplateWithHttpInfo(string? templateId = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Retrieves the information of templates 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessListTemplates</returns>
        ResponseSuccessListTemplates ListTemplates(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Retrieves the information of templates 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessListTemplates</returns>
        ApiResponse<ResponseSuccessListTemplates> ListTemplatesWithHttpInfo(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update PDF Template
        /// </summary>
        /// <remarks>
        /// This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccess</returns>
        ResponseSuccess UpdateTemplate(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// Update PDF Template
        /// </summary>
        /// <remarks>
        /// This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccess</returns>
        ApiResponse<ResponseSuccess> UpdateTemplateWithHttpInfo(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessTemplate</returns>
        System.Threading.Tasks.Task<ResponseSuccessTemplate> GetTemplateAsync(string? templateId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessTemplate>> GetTemplateWithHttpInfoAsync(string? templateId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Retrieves the information of templates 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessListTemplates</returns>
        System.Threading.Tasks.Task<ResponseSuccessListTemplates> ListTemplatesAsync(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Templates
        /// </summary>
        /// <remarks>
        /// Retrieves the information of templates 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessListTemplates)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessListTemplates>> ListTemplatesWithHttpInfoAsync(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update PDF Template
        /// </summary>
        /// <remarks>
        /// This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccess</returns>
        System.Threading.Tasks.Task<ResponseSuccess> UpdateTemplateAsync(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update PDF Template
        /// </summary>
        /// <remarks>
        /// This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccess>> UpdateTemplateWithHttpInfoAsync(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateManagementApi : ITemplateManagementApiSync, ITemplateManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateManagementApi : ITemplateManagementApi
    {
        private APITemplateio.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateManagementApi(string basePath)
        {
            this.Configuration = APITemplateio.Client.Configuration.MergeConfigurations(
                APITemplateio.Client.GlobalConfiguration.Instance,
                new APITemplateio.Client.Configuration { BasePath = basePath }
            );
            this.Client = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = APITemplateio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateManagementApi(APITemplateio.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = APITemplateio.Client.Configuration.MergeConfigurations(
                APITemplateio.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = APITemplateio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplateManagementApi(APITemplateio.Client.ISynchronousClient client, APITemplateio.Client.IAsynchronousClient asyncClient, APITemplateio.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = APITemplateio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public APITemplateio.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public APITemplateio.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public APITemplateio.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public APITemplateio.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get PDF template Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessTemplate</returns>
        public ResponseSuccessTemplate GetTemplate(string? templateId = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessTemplate> localVarResponse = GetTemplateWithHttpInfo(templateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get PDF template Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessTemplate</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessTemplate> GetTemplateWithHttpInfo(string? templateId = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            }

            localVarRequestOptions.Operation = "TemplateManagementApi.GetTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseSuccessTemplate>("/v2/get-template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get PDF template Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessTemplate</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessTemplate> GetTemplateAsync(string? templateId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessTemplate> localVarResponse = await GetTemplateWithHttpInfoAsync(templateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get PDF template Retrieves information of the PDF template (**This is an experimental API, contact support to learn more**) 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console(Manage Templates) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessTemplate)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessTemplate>> GetTemplateWithHttpInfoAsync(string? templateId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            }

            localVarRequestOptions.Operation = "TemplateManagementApi.GetTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseSuccessTemplate>("/v2/get-template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Templates Retrieves the information of templates 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessListTemplates</returns>
        public ResponseSuccessListTemplates ListTemplates(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessListTemplates> localVarResponse = ListTemplatesWithHttpInfo(limit, offset, format, templateId, groupName, withLayerInfo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Templates Retrieves the information of templates 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessListTemplates</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessListTemplates> ListTemplatesWithHttpInfo(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            }
            if (groupName != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "group_name", groupName));
            }
            if (withLayerInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "with_layer_info", withLayerInfo));
            }

            localVarRequestOptions.Operation = "TemplateManagementApi.ListTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseSuccessListTemplates>("/v2/list-templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Templates Retrieves the information of templates 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessListTemplates</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessListTemplates> ListTemplatesAsync(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessListTemplates> localVarResponse = await ListTemplatesWithHttpInfoAsync(limit, offset, format, templateId, groupName, withLayerInfo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Templates Retrieves the information of templates 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="format">To filter the templates by either &#39;PDF&#39; or &#39;JPEG&#39; (optional)</param>
        /// <param name="templateId">To filter the templates by template id (optional)</param>
        /// <param name="groupName">To filter the templates by the group name (optional)</param>
        /// <param name="withLayerInfo">Return along with layer information for image templates, 0&#x3D;false , 1&#x3D;true. Default to &#39;0&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessListTemplates)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessListTemplates>> ListTemplatesWithHttpInfoAsync(string? limit = default(string?), string? offset = default(string?), string? format = default(string?), string? templateId = default(string?), string? groupName = default(string?), string? withLayerInfo = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            }
            if (groupName != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "group_name", groupName));
            }
            if (withLayerInfo != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "with_layer_info", withLayerInfo));
            }

            localVarRequestOptions.Operation = "TemplateManagementApi.ListTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseSuccessListTemplates>("/v2/list-templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update PDF Template This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccess</returns>
        public ResponseSuccess UpdateTemplate(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccess> localVarResponse = UpdateTemplateWithHttpInfo(updateTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update PDF Template This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccess</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccess> UpdateTemplateWithHttpInfo(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateTemplateRequest' is set
            if (updateTemplateRequest == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'updateTemplateRequest' when calling TemplateManagementApi->UpdateTemplate");
            }

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateTemplateRequest;

            localVarRequestOptions.Operation = "TemplateManagementApi.UpdateTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseSuccess>("/v2/update-template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update PDF Template This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccess</returns>
        public async System.Threading.Tasks.Task<ResponseSuccess> UpdateTemplateAsync(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccess> localVarResponse = await UpdateTemplateWithHttpInfoAsync(updateTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update PDF Template This endpoint updates PDF template (**This is an experimental API, contact support to learn more**)
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccess)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccess>> UpdateTemplateWithHttpInfoAsync(UpdateTemplateRequest updateTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateTemplateRequest' is set
            if (updateTemplateRequest == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'updateTemplateRequest' when calling TemplateManagementApi->UpdateTemplate");
            }


            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateTemplateRequest;

            localVarRequestOptions.Operation = "TemplateManagementApi.UpdateTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseSuccess>("/v2/update-template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
