/*
 * APITemplate.io API Reference
 *
 * # Introduction   Welcome to the APITemplate.io API v2!  APITemplate.io provides PDF generation services including [Template-based PDF generation](https://apitemplate.io/pdf-generation-api/), [HTML to PDF](https://apitemplate.io/html-to-pdf-api/), and [URL to PDF conversions](https://apitemplate.io/create-pdf-from-url/), as well as an [image generation API](https://apitemplate.io/image-generation-api/).  This page contains the documentation on how to use APITemplate.io through API calls. With the APITemplate.io API, you can create PDF documents and images, as well as manage your templates.  Our API is built on RESTful HTTP, so you can utilize any HTTP/REST library of your choice in your preferred programming language to interact with APITemplate.io's API.  **Steps to produce PDFs/Images** 1. Design your template(s) using our intuitive drag-and-drop template editor or the HTML editor and save it. 2. Integrate your workflow, either with platforms like Zapier, Make.com/Integromat, Bubble.io, or any programming languages that support REST API, to send us the JSON data along with the template ID/URL/or HTML content. 3. Our REST API will then return a download URL for the images (in PNG and JPEG formats) or PDFs.  # Authentication Upon signing up for an account, an API key will be generated for you. If needed, you can reset this API key via the web console (under the \"API Integration\" section).  To integrate with our services, you need to authenticate with the APITemplate.io API. Provide your secret key in the request header using the X-API-KEY field.   # Content Type and CORS  **Request Content-Type** The Content-Type for POST and GET requests is set to application/json.  **Cross-Origin Resource Sharing** This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.    # Regional API endpoint(s) A regional API endpoint is intended for customers in the same region. The data for the request and generated PDFs/images are processed and stored within the region.  The regions are:  | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- --| | Default (Singapore)  | https://rest.apitemplate.io         | 100                   | 1                       | | Europe (Frankfurt)   | https://rest-de.apitemplate.io      | 100                   | 1                       | | US East (N. Virginia)| https://rest-us.apitemplate.io      | 100                   | 1                       | | Australia (Sydney)   | https://rest-au.apitemplate.io      | 30                    | 6                       |   Alternative Regions: | Region               | Endpoint                            | Max Timeout (Seconds) | Max Payload Size(MB)** | |- -- -- -- -- -- -- -- -- -- -- -|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- --| | Default (Singapore)  | https://rest-alt.apitemplate.io     | 30                    | 6                       | | Europe (Frankfurt)   | https://rest-alt-de.apitemplate.io  | 30                    | 6                       | | US East (N. Virginia)| https://rest-alt-us.apitemplate.io  | 30                    | 6                       |  ** Note: - Payload size applies to request and response - If \"export_type\" is set to `json` which output file that on AWS S3 doesn't have the limitation - If the \"export_type\" is set to `file` which returns binary data of the generated PDF, the file size of the generated PDF is limited to either 6MB or 1MB based on the region    Other regions are available on request, contact us at hello@apitemplate.io for more information  # Rate limiting Our API endpoints use IP-based rate limiting to ensure fair usage and prevent abuse. Users are allowed to make up to **100 requests per 10 seconds**. This rate limit is designed to accommodate a reasonable volume of requests while maintaining optimal performance for all users.  However, if you exceed this limit and make additional requests, you will receive a response with HTTP code 429. This status code indicates that you have reached the rate limit and need to wait before making further requests. 
 *
 * The version of the OpenAPI document: Version 2.0
 * Contact: hello@apitemplate.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using APITemplateio.Client;
using APITemplateio.Model;

namespace APITemplateio.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIIntegrationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Image
        /// </summary>
        /// <remarks>
        /// This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessImageFile</returns>
        ResponseSuccessImageFile CreateImage(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create an Image
        /// </summary>
        /// <remarks>
        /// This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessImageFile</returns>
        ApiResponse<ResponseSuccessImageFile> CreateImageWithHttpInfo(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a PDF
        /// </summary>
        /// <remarks>
        /// This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessPDFFile</returns>
        ResponseSuccessPDFFile CreatePdf(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create a PDF
        /// </summary>
        /// <remarks>
        /// This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessPDFFile</returns>
        ApiResponse<ResponseSuccessPDFFile> CreatePdfWithHttpInfo(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a PDF from HTML
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from HTML with JSON data 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessPDFFile</returns>
        ResponseSuccessPDFFile CreatePdfFromHtml(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create a PDF from HTML
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from HTML with JSON data 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessPDFFile</returns>
        ApiResponse<ResponseSuccessPDFFile> CreatePdfFromHtmlWithHttpInfo(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0);
        /// <summary>
        /// Create a PDF from URL
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from a URL 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessPDFFile</returns>
        ResponseSuccessPDFFile CreatePdfFromUrl(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0);

        /// <summary>
        /// Create a PDF from URL
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from a URL 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessPDFFile</returns>
        ApiResponse<ResponseSuccessPDFFile> CreatePdfFromUrlWithHttpInfo(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete an Object
        /// </summary>
        /// <remarks>
        /// Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessDeleteObject</returns>
        ResponseSuccessDeleteObject DeleteObject(string transactionRef, int operationIndex = 0);

        /// <summary>
        /// Delete an Object
        /// </summary>
        /// <remarks>
        /// Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessDeleteObject</returns>
        ApiResponse<ResponseSuccessDeleteObject> DeleteObjectWithHttpInfo(string transactionRef, int operationIndex = 0);
        /// <summary>
        /// List Generated Objects
        /// </summary>
        /// <remarks>
        /// Retrieves all the generated PDFs and images 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessListObjects</returns>
        ResponseSuccessListObjects ListObjects(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Generated Objects
        /// </summary>
        /// <remarks>
        /// Retrieves all the generated PDFs and images 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessListObjects</returns>
        ApiResponse<ResponseSuccessListObjects> ListObjectsWithHttpInfo(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIIntegrationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an Image
        /// </summary>
        /// <remarks>
        /// This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessImageFile</returns>
        System.Threading.Tasks.Task<ResponseSuccessImageFile> CreateImageAsync(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an Image
        /// </summary>
        /// <remarks>
        /// This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessImageFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessImageFile>> CreateImageWithHttpInfoAsync(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a PDF
        /// </summary>
        /// <remarks>
        /// This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessPDFFile</returns>
        System.Threading.Tasks.Task<ResponseSuccessPDFFile> CreatePdfAsync(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a PDF
        /// </summary>
        /// <remarks>
        /// This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessPDFFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessPDFFile>> CreatePdfWithHttpInfoAsync(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a PDF from HTML
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from HTML with JSON data 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessPDFFile</returns>
        System.Threading.Tasks.Task<ResponseSuccessPDFFile> CreatePdfFromHtmlAsync(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a PDF from HTML
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from HTML with JSON data 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessPDFFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessPDFFile>> CreatePdfFromHtmlWithHttpInfoAsync(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a PDF from URL
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from a URL 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessPDFFile</returns>
        System.Threading.Tasks.Task<ResponseSuccessPDFFile> CreatePdfFromUrlAsync(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a PDF from URL
        /// </summary>
        /// <remarks>
        /// - This endpoint creates a PDF file from a URL 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessPDFFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessPDFFile>> CreatePdfFromUrlWithHttpInfoAsync(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Object
        /// </summary>
        /// <remarks>
        /// Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessDeleteObject</returns>
        System.Threading.Tasks.Task<ResponseSuccessDeleteObject> DeleteObjectAsync(string transactionRef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Object
        /// </summary>
        /// <remarks>
        /// Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessDeleteObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessDeleteObject>> DeleteObjectWithHttpInfoAsync(string transactionRef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Generated Objects
        /// </summary>
        /// <remarks>
        /// Retrieves all the generated PDFs and images 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessListObjects</returns>
        System.Threading.Tasks.Task<ResponseSuccessListObjects> ListObjectsAsync(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Generated Objects
        /// </summary>
        /// <remarks>
        /// Retrieves all the generated PDFs and images 
        /// </remarks>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessListObjects)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSuccessListObjects>> ListObjectsWithHttpInfoAsync(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAPIIntegrationApi : IAPIIntegrationApiSync, IAPIIntegrationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class APIIntegrationApi : IAPIIntegrationApi
    {
        private APITemplateio.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="APIIntegrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIIntegrationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIIntegrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public APIIntegrationApi(string basePath)
        {
            this.Configuration = APITemplateio.Client.Configuration.MergeConfigurations(
                APITemplateio.Client.GlobalConfiguration.Instance,
                new APITemplateio.Client.Configuration { BasePath = basePath }
            );
            this.Client = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = APITemplateio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIIntegrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public APIIntegrationApi(APITemplateio.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = APITemplateio.Client.Configuration.MergeConfigurations(
                APITemplateio.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new APITemplateio.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = APITemplateio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="APIIntegrationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public APIIntegrationApi(APITemplateio.Client.ISynchronousClient client, APITemplateio.Client.IAsynchronousClient asyncClient, APITemplateio.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = APITemplateio.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public APITemplateio.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public APITemplateio.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public APITemplateio.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public APITemplateio.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Image This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessImageFile</returns>
        public ResponseSuccessImageFile CreateImage(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessImageFile> localVarResponse = CreateImageWithHttpInfo(templateId, body, outputImageType, expiration, cloudStorage, postactionS3Filekey, postactionS3Bucket, meta);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Image This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessImageFile</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessImageFile> CreateImageWithHttpInfo(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'templateId' when calling APIIntegrationApi->CreateImage");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'body' when calling APIIntegrationApi->CreateImage");
            }

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            if (outputImageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_image_type", outputImageType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreateImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseSuccessImageFile>("/v2/create-image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Image This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessImageFile</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessImageFile> CreateImageAsync(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessImageFile> localVarResponse = await CreateImageWithHttpInfoAsync(templateId, body, outputImageType, expiration, cloudStorage, postactionS3Filekey, postactionS3Bucket, meta, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Image This endpoint creates a JPEG file(along with PNG) with JSON data and your template 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="outputImageType">- Output image type(JPEG or PNG format), default to &#x60;all&#x60;. Options are &#x60;all&#x60;, &#x60;jpegOnly&#x60;,&#x60;pngOnly&#x60;.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessImageFile)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessImageFile>> CreateImageWithHttpInfoAsync(string templateId, Object body, string? outputImageType = default(string?), int? expiration = default(int?), int? cloudStorage = default(int?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'templateId' when calling APIIntegrationApi->CreateImage");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'body' when calling APIIntegrationApi->CreateImage");
            }


            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            if (outputImageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_image_type", outputImageType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreateImage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseSuccessImageFile>("/v2/create-image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a PDF This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessPDFFile</returns>
        public ResponseSuccessPDFFile CreatePdf(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> localVarResponse = CreatePdfWithHttpInfo(templateId, body, exportType, expiration, outputHtml, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a PDF This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessPDFFile</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> CreatePdfWithHttpInfo(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'templateId' when calling APIIntegrationApi->CreatePdf");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'body' when calling APIIntegrationApi->CreatePdf");
            }

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            if (exportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "export_type", exportType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (outputHtml != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_html", outputHtml));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }
            if (imageResampleRes != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "image_resample_res", imageResampleRes));
            }
            if (isCmyk != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "is_cmyk", isCmyk));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (pdfStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "pdf_standard", pdfStandard));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "webhook_url", webhookUrl));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreatePdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseSuccessPDFFile>("/v2/create-pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a PDF This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessPDFFile</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessPDFFile> CreatePdfAsync(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> localVarResponse = await CreatePdfWithHttpInfoAsync(templateId, body, exportType, expiration, outputHtml, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a PDF This endpoint creates a PDF file with JSON data and your template. We support synchoronus and asynchronous PDF generation.
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Your template id, it can be obtained in the web console</param>
        /// <param name="body"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputHtml">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default). - To enable output of html content, set the value to &#x60;1&#x60; and it will return in the JSON response as html_url field (as a URL)  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessPDFFile)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile>> CreatePdfWithHttpInfoAsync(string templateId, Object body, string? exportType = default(string?), int? expiration = default(int?), string? outputHtml = default(string?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'templateId' when calling APIIntegrationApi->CreatePdf");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'body' when calling APIIntegrationApi->CreatePdf");
            }


            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            if (exportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "export_type", exportType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (outputHtml != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_html", outputHtml));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }
            if (imageResampleRes != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "image_resample_res", imageResampleRes));
            }
            if (isCmyk != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "is_cmyk", isCmyk));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (pdfStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "pdf_standard", pdfStandard));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "webhook_url", webhookUrl));
            }
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreatePdf";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseSuccessPDFFile>("/v2/create-pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePdf", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a PDF from HTML - This endpoint creates a PDF file from HTML with JSON data 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessPDFFile</returns>
        public ResponseSuccessPDFFile CreatePdfFromHtml(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> localVarResponse = CreatePdfFromHtmlWithHttpInfo(createPdfFromHtmlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a PDF from HTML - This endpoint creates a PDF file from HTML with JSON data 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessPDFFile</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> CreatePdfFromHtmlWithHttpInfo(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'createPdfFromHtmlRequest' is set
            if (createPdfFromHtmlRequest == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'createPdfFromHtmlRequest' when calling APIIntegrationApi->CreatePdfFromHtml");
            }

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (exportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "export_type", exportType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }
            if (imageResampleRes != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "image_resample_res", imageResampleRes));
            }
            if (isCmyk != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "is_cmyk", isCmyk));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (pdfStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "pdf_standard", pdfStandard));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "webhook_url", webhookUrl));
            }
            localVarRequestOptions.Data = createPdfFromHtmlRequest;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreatePdfFromHtml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseSuccessPDFFile>("/v2/create-pdf-from-html", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePdfFromHtml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a PDF from HTML - This endpoint creates a PDF file from HTML with JSON data 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessPDFFile</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessPDFFile> CreatePdfFromHtmlAsync(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> localVarResponse = await CreatePdfFromHtmlWithHttpInfoAsync(createPdfFromHtmlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a PDF from HTML - This endpoint creates a PDF file from HTML with JSON data 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromHtmlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessPDFFile)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile>> CreatePdfFromHtmlWithHttpInfoAsync(CreatePdfFromHtmlRequest createPdfFromHtmlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPdfFromHtmlRequest' is set
            if (createPdfFromHtmlRequest == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'createPdfFromHtmlRequest' when calling APIIntegrationApi->CreatePdfFromHtml");
            }


            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (exportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "export_type", exportType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }
            if (imageResampleRes != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "image_resample_res", imageResampleRes));
            }
            if (isCmyk != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "is_cmyk", isCmyk));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (pdfStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "pdf_standard", pdfStandard));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "webhook_url", webhookUrl));
            }
            localVarRequestOptions.Data = createPdfFromHtmlRequest;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreatePdfFromHtml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseSuccessPDFFile>("/v2/create-pdf-from-html", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePdfFromHtml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a PDF from URL - This endpoint creates a PDF file from a URL 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessPDFFile</returns>
        public ResponseSuccessPDFFile CreatePdfFromUrl(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> localVarResponse = CreatePdfFromUrlWithHttpInfo(createPdfFromUrlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a PDF from URL - This endpoint creates a PDF file from a URL 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessPDFFile</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> CreatePdfFromUrlWithHttpInfo(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'createPdfFromUrlRequest' is set
            if (createPdfFromUrlRequest == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'createPdfFromUrlRequest' when calling APIIntegrationApi->CreatePdfFromUrl");
            }

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (exportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "export_type", exportType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }
            if (imageResampleRes != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "image_resample_res", imageResampleRes));
            }
            if (isCmyk != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "is_cmyk", isCmyk));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (pdfStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "pdf_standard", pdfStandard));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "webhook_url", webhookUrl));
            }
            localVarRequestOptions.Data = createPdfFromUrlRequest;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreatePdfFromUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseSuccessPDFFile>("/v2/create-pdf-from-url", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePdfFromUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a PDF from URL - This endpoint creates a PDF file from a URL 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessPDFFile</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessPDFFile> CreatePdfFromUrlAsync(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile> localVarResponse = await CreatePdfFromUrlWithHttpInfoAsync(createPdfFromUrlRequest, exportType, expiration, outputFormat, filename, imageResampleRes, isCmyk, cloudStorage, pdfStandard, postactionS3Filekey, postactionS3Bucket, meta, async, webhookUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a PDF from URL - This endpoint creates a PDF file from a URL 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPdfFromUrlRequest"></param>
        /// <param name="exportType">- Either &#x60;file&#x60; or &#x60;json&#x60;(Default).   - The option &#x60;json&#x60; returns a JSON object, and the output PDF is stored on a CDN. Use this with the parameter &#x60;expiration&#x60;   - The option &#x60;file&#x60; returns binary data of the generated PDF(Secure and completely private) and the response HTTP header Content-Disposition is set to attachment.  (optional)</param>
        /// <param name="expiration">- Expiration of the generated PDF in minutes(default to &#x60;0&#x60;, store permanently)   - Use &#x60;0&#x60; to store on cdn permanently   - Or use the range between &#x60;1&#x60; minute and &#x60;10080&#x60; minutes(7 days) to specify the expiration of the generated PDF  (optional)</param>
        /// <param name="outputFormat">- Either &#x60;pdf&#x60;(Default) or &#x60;html&#x60;. - It&#39;s generating PDF by default. However, you can specify output_format&#x3D;html to generate only HTML(It will return in the JSON response as download_url field as a URL).  (optional)</param>
        /// <param name="filename">- Default to UUID (e.g 0c93bd9e-9ebb-4634-a70f-de9131848416.pdf). Use this to specify custom file name, it should end with &#x60;.pdf&#x60;  (optional)</param>
        /// <param name="imageResampleRes">- We embed the original images by default, meaning large PDF file sizes. Specifying the option &#39;image_resample_res&#39; helps reduce the PDF file size by downsampling the images of the current PDF to a resolution(in DPI). Common values are 72, 96, 150, 300 and 600.  (optional)</param>
        /// <param name="isCmyk">- Use CMYK color profile, 1&#x3D;true, 0&#x3D;false. Default to &#39;0&#39;  (optional)</param>
        /// <param name="cloudStorage">- Upload the generated PDFs/images to our storage CDN, default to &#x60;1&#x60;. If you have configured &#x60;Post Action&#x60; to upload the PDFs/Images to your own S3, please set it to &#x60;0&#x60;.  (optional)</param>
        /// <param name="pdfStandard">Default to PDF1.4. Options are PDFA1B, PDFA2 and PDFA3 (This is an experimental feature)  (optional)</param>
        /// <param name="postactionS3Filekey">- This is to specify the file name for &#x60;Post Action(S3 Storage)&#x60;. - Please do not specify the file extension - Please make sure the file name is unique - You might use slash (/) as the folder delimiter  (optional)</param>
        /// <param name="postactionS3Bucket">- This is to overwrite the AWS Bucket for &#x60;Post Action(S3 Storage)&#x60;.  (optional)</param>
        /// <param name="meta">- Specify an external reference ID for your own reference. It appears in the &#x60;list-objects&#x60; API.  (optional)</param>
        /// <param name="async">- Either &#x60;1&#x60; or &#x60;0&#x60;(Default).  &#x60;0&#x60; is synchronous call(default), &#x60;1&#x60; is asynchronous call - To generate PDF asynchronously, set the value to &#x60;1&#x60; and the API call returns immediately. Once the PDF document is generated, we will make a HTTP/HTTPS GET to your URL(webhook_url) and will retry for 3 times before giving up. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then &#x60;webhook_url&#x60; is mandatory  (optional)</param>
        /// <param name="webhookUrl">- It is the URL of your webhook URL, it starts with http:// or https:// and has to be urlencoded. - If &#x60;async&#x60; is set to &#x60;1&#x60;, then you have to specify the &#x60;webhook_url&#x60;.   #### Format of Webhook callback  Once the PDF is generated, we will initiate a HTTP/HTTPS GET call to the following URL:  https://&#x60;[yourwebserver.com]&#x60;?&amp;primary_url&#x3D;&#x60;[primary_url]&#x60;&amp;transaction_ref&#x3D;&#x60;[transaction_ref]&#x60;&amp;status&#x3D;&#x60;[status]&#x60;&amp;message&#x3D;&#x60;[message]&#x60;  - &#x60;[yourwebserver.com]&#x60;: The web services to handle the callback, which is the &#x60;webhook_url&#x60; - &#x60;[primary_url]&#x60;: The URL to the PDF document - &#x60;[transaction_ref]&#x60;: The transaction reference number - &#x60;[status]&#x60; : Status of the transaction, either &#x60;success&#x60; or &#x60;error&#x60; - &#x60;[message]&#x60; : Status message  ***The following is a sample webhook call back to your server***  https://yourwebserver.com?&amp;primary_url&#x3D;https%3A%2F%2Fpub-cdn.apitemplate.io%2F2021%2F06%2Fb692183d-46d7-3213-891a-460a5814ad3f.pdf&amp;transaction_ref&#x3D;b692183d-46d7-3213-891a-460a5814ad3f&amp;status&#x3D;success  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessPDFFile)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessPDFFile>> CreatePdfFromUrlWithHttpInfoAsync(CreatePdfFromUrlRequest createPdfFromUrlRequest, string? exportType = default(string?), int? expiration = default(int?), string? outputFormat = default(string?), string? filename = default(string?), string? imageResampleRes = default(string?), string? isCmyk = default(string?), int? cloudStorage = default(int?), string? pdfStandard = default(string?), string? postactionS3Filekey = default(string?), string? postactionS3Bucket = default(string?), string? meta = default(string?), string? async = default(string?), string? webhookUrl = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPdfFromUrlRequest' is set
            if (createPdfFromUrlRequest == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'createPdfFromUrlRequest' when calling APIIntegrationApi->CreatePdfFromUrl");
            }


            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (exportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "export_type", exportType));
            }
            if (expiration != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "expiration", expiration));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "output_format", outputFormat));
            }
            if (filename != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));
            }
            if (imageResampleRes != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "image_resample_res", imageResampleRes));
            }
            if (isCmyk != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "is_cmyk", isCmyk));
            }
            if (cloudStorage != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "cloud_storage", cloudStorage));
            }
            if (pdfStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "pdf_standard", pdfStandard));
            }
            if (postactionS3Filekey != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_filekey", postactionS3Filekey));
            }
            if (postactionS3Bucket != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "postaction_s3_bucket", postactionS3Bucket));
            }
            if (meta != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "meta", meta));
            }
            if (async != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "async", async));
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "webhook_url", webhookUrl));
            }
            localVarRequestOptions.Data = createPdfFromUrlRequest;

            localVarRequestOptions.Operation = "APIIntegrationApi.CreatePdfFromUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseSuccessPDFFile>("/v2/create-pdf-from-url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePdfFromUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Object Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessDeleteObject</returns>
        public ResponseSuccessDeleteObject DeleteObject(string transactionRef, int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessDeleteObject> localVarResponse = DeleteObjectWithHttpInfo(transactionRef);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an Object Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessDeleteObject</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessDeleteObject> DeleteObjectWithHttpInfo(string transactionRef, int operationIndex = 0)
        {
            // verify the required parameter 'transactionRef' is set
            if (transactionRef == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'transactionRef' when calling APIIntegrationApi->DeleteObject");
            }

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "transaction_ref", transactionRef));

            localVarRequestOptions.Operation = "APIIntegrationApi.DeleteObject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseSuccessDeleteObject>("/v2/delete-object", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteObject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Object Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessDeleteObject</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessDeleteObject> DeleteObjectAsync(string transactionRef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessDeleteObject> localVarResponse = await DeleteObjectWithHttpInfoAsync(transactionRef, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an Object Delete a PDF or an image from CDN and mark the transaction as deleted 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRef">Object transaction reference</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessDeleteObject)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessDeleteObject>> DeleteObjectWithHttpInfoAsync(string transactionRef, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionRef' is set
            if (transactionRef == null)
            {
                throw new APITemplateio.Client.ApiException(400, "Missing required parameter 'transactionRef' when calling APIIntegrationApi->DeleteObject");
            }


            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "transaction_ref", transactionRef));

            localVarRequestOptions.Operation = "APIIntegrationApi.DeleteObject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseSuccessDeleteObject>("/v2/delete-object", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteObject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Generated Objects Retrieves all the generated PDFs and images 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseSuccessListObjects</returns>
        public ResponseSuccessListObjects ListObjects(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessListObjects> localVarResponse = ListObjectsWithHttpInfo(limit, offset, templateId, transactionType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Generated Objects Retrieves all the generated PDFs and images 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseSuccessListObjects</returns>
        public APITemplateio.Client.ApiResponse<ResponseSuccessListObjects> ListObjectsWithHttpInfo(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0)
        {
            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }

            localVarRequestOptions.Operation = "APIIntegrationApi.ListObjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseSuccessListObjects>("/v2/list-objects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListObjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Generated Objects Retrieves all the generated PDFs and images 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseSuccessListObjects</returns>
        public async System.Threading.Tasks.Task<ResponseSuccessListObjects> ListObjectsAsync(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            APITemplateio.Client.ApiResponse<ResponseSuccessListObjects> localVarResponse = await ListObjectsWithHttpInfoAsync(limit, offset, templateId, transactionType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Generated Objects Retrieves all the generated PDFs and images 
        /// </summary>
        /// <exception cref="APITemplateio.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Retrieve only the number of records specified. Default to 300 (optional)</param>
        /// <param name="offset">Offset is used to skip the number of records from the results. Default to 0 (optional)</param>
        /// <param name="templateId">Filtered by template id (optional)</param>
        /// <param name="transactionType">Filtered by transaction type, options are &#x60;PDF&#x60;, &#x60;JPEG&#x60; or &#x60;MERGE&#x60; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseSuccessListObjects)</returns>
        public async System.Threading.Tasks.Task<APITemplateio.Client.ApiResponse<ResponseSuccessListObjects>> ListObjectsWithHttpInfoAsync(string? limit = default(string?), string? offset = default(string?), string? templateId = default(string?), string? transactionType = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            APITemplateio.Client.RequestOptions localVarRequestOptions = new APITemplateio.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = APITemplateio.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = APITemplateio.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (templateId != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "template_id", templateId));
            }
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(APITemplateio.Client.ClientUtils.ParameterToMultiMap("", "transaction_type", transactionType));
            }

            localVarRequestOptions.Operation = "APIIntegrationApi.ListObjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseSuccessListObjects>("/v2/list-objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListObjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
